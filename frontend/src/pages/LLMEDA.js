import React, { useState } from 'react';
import { Typography, TextField, Button, Box, CircularProgress, Paper, Accordion, AccordionSummary, AccordionDetails } from '@mui/material';
import ExpandMoreIcon from '@mui/icons-material/ExpandMore';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';




const LLMEDA = () => {
  const [query, setQuery] = useState('');
  const [result, setResult] = useState({ plot: null, text: '', explanation: '' });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [retry, setRetry] = useState(false);


  const handleQuery = async () => {
    setLoading(true);
    setError('');
    setRetry(false);
    setResult({ plot: null, text: '', explanation: '' });

    try {
      const BACKEND_URL = process.env.REACT_APP_BACKEND_URL; 
      const response = await fetch(`${BACKEND_URL}/api/llm-eda`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query }),
      });
      const data = await response.json();
      if (data.error) {
        setError(data.error);
        setRetry(data.retry || false);
        setLoading(false);
        return;
      }
      
      setResult({
        plot: data.plot,
        text: data.text,
        code: data.code,
        steps: data.steps,
        evaluation: data.evaluation,
        explanation: data.plot_explanation 
      });
      setRetry(false);
    } catch (err) {
      setError(err.message || 'Something went wrong.');
      setRetry(true);
    }
    setLoading(false);
  };

  return (
    <Box maxWidth={800} mx="auto">
      <Typography variant="h5" gutterBottom>
        Chat with your Data
      </Typography>
      <Typography variant="body1" gutterBottom>
        In this section, you can interact with the clinical metadata in the GSE96058 breast cancer dataset. <br/>
        To gain new insights, ask any question about your clinical metadata.<br />
        To get you started, here are some example questions you can ask:
      </Typography>
      <ul style={{ marginTop: 0, marginBottom: 16 }}>
        <li>Display a plot for how many patients with each PAM50 subtype are in the study</li>
        <li>Show a table of the number of patients with each Nottingham grade</li>
        <li>What columns do we have in the dataset and how are they meaningful in breast cancer research?</li>
        <li>Show summary statistics for tumor size and age at diagnosis</li>
      </ul>
      <Typography variant="body1" gutterBottom>
        A response including the results and an explanation will be given. <br/>
        Depending on the use case, statistics or plots are included below the response.<br />
        At the bottom of the page, you find the analysis plan that was generated by the Planner LLM, and the Python code that was generated by the Coder LLM to perform the analysis.<br />
      </Typography>
      <TextField
        label="Your question"
        fullWidth
        multiline
        minRows={2}
        value={query}
        onChange={e => setQuery(e.target.value)}
        sx={{ my: 2 }}
      />
      <Button
        variant="contained"
        onClick={handleQuery}
        disabled={loading || !query.trim()}
      >
        {loading ? <CircularProgress size={24} /> : 'Run'}
      </Button>

      {error && retry ? (
        <Box sx={{ mt: 2 }}>
          <Typography color="error">
            {typeof error === "string" ? error : error.message}
          </Typography>
          <Button variant="outlined" onClick={handleQuery} sx={{ mt: 1 }}>
            Retry
          </Button>
        </Box>
      ) : error && (
        <Typography color="error" sx={{ mt: 2 }}>
          {typeof error === "string" ? error : error.message}
        </Typography>
      )}


      {result.evaluation && (
        <Paper elevation={2} sx={{ my: 2, p: 2, background: "#e7f7eb" }}>
          <Typography variant="h6" sx={{ mb: 1 }}>
            ðŸ§  Key Insights (AI Interpretation)
          </Typography>
          <ReactMarkdown remarkPlugins={[remarkGfm]}>
            {result.evaluation}
          </ReactMarkdown>
        </Paper>
      )}

      {(result.text || result.plot || result.explanation || result.code) && (
        <Paper elevation={3} sx={{ my: 3, p: 2 }}>
          {result.text && (
            <ReactMarkdown remarkPlugins={[remarkGfm]}>
              {result.text}
            </ReactMarkdown>

          )}
          {result.plot && (
            <>
              <img src={result.plot} alt="Result Plot" style={{ maxWidth: '100%', marginBottom: 16 }} />
              {result.explanation && (
                <Typography variant="caption" sx={{ display: "block", mt: 1, color: "text.secondary" }}>
                  <strong>Plot Description:</strong> {result.explanation}
                </Typography>
              )}
            </>
          )}

          {/* Analysis Plan */}
          {Array.isArray(result.steps) && result.steps.length > 0 && (
            <Accordion sx={{ mt: 2 }}>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography>Show analysis plan (from Planner LLM)</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <ol style={{ marginLeft: 16 }}>
                  {result.steps.map((step, idx) => (
                    <li key={idx} style={{ marginBottom: 8 }}>{step}</li>
                  ))}
                </ol>
              </AccordionDetails>
            </Accordion>
          )}
          {/* Python code collapsible */}
          {result.code && (
            <Accordion sx={{ mt: 2 }}>
              <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                <Typography>Show generated Python code (from Coder LLM)</Typography>
              </AccordionSummary>
              <AccordionDetails>
                <pre style={{
                  background: "#f7f7f9",
                  borderRadius: "4px",
                  padding: "12px",
                  overflowX: "auto",
                  fontSize: "0.72rem",         // smaller font
                  lineHeight: 1.5,
                  // whiteSpace: "pre-wrap",      // enables wrapping
                  // wordBreak: "break-word"      // ensures long words/lines wrap
                }}>
                  {result.code}
                </pre>
              </AccordionDetails>
            </Accordion>
          )}
        </Paper>
      )}

    </Box>
  );
};

export default LLMEDA;
